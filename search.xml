<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[zxing的简单使用]]></title>
      <url>http://yoursite.com/2016/07/23/zxing%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>业内都说没有二维码扫描及生成的 APP，不是一个好的 APP，为了不掉队，学习了 Google 员工的 <a href="https://github.com/zxing/zxing" target="_blank" rel="external">zxing</a> 的开源项目。由于本人能力有限， <a href="https://github.com/zxing/zxing" target="_blank" rel="external">zxing</a> 项目实在超出了本人的范围，我只选取了 二维码扫描、解析及生成的代码。<br><a id="more"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>将二维码集成到 APP 中已经是一件在正常不过的事，所以我就不多介绍二维码的重要性那些了。直接开始吧~</p>
<hr>
<h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><p>依我个人而言，我喜欢先看到效果，才有动力继续往下看。</p>
<img src="/2016/07/23/zxing的简单使用/zxing的简单使用.gif" alt="zxing的简单使用演示" title="zxing的简单使用演示">
<hr>
<h1 id="zxing"><a href="#zxing" class="headerlink" title="zxing"></a>zxing</h1><p><strong>项目地址</strong>：<a href="https://github.com/zxing/zxing" target="_blank" rel="external">GitHub传送门</a></p>
<p><strong>zxing</strong> 是一个开源 Java 类库用于解析多种格式的 1D/2D 条形码、二维码。目标是能够对 QR 编码、Data Matrix、UPC 的 1D 条形码进行解码。 其提供了多种平台下的客户端包括：Java SE 和 Android。</p>
<hr>
<blockquote>
<p><strong>本博文将介绍：</strong></p>
<p><strong>1、扫描二维码：</strong>点击按钮，跳转到 zxing 中的 Activity 去扫描，并将得到的结果显示到 TextView</p>
<p><strong>2、解析二维码</strong>：长按二维码，进行解析，并将二维码中的内容弹 Toast 提示</p>
<p><strong>3、生成二维码：</strong>点击按钮，将 <strong><a href="http://www.liuguangmingcn.com" target="_blank" rel="external">http://www.liuguangmingcn.com</a></strong> 生成二维码，并显示出来</p>
</blockquote>
<hr>
<h1 id="zxing-的简单使用"><a href="#zxing-的简单使用" class="headerlink" title="zxing 的简单使用"></a>zxing 的简单使用</h1><p>为了方便使用，已将其抽取出来成一个 <code>module</code> 基于 <strong>zxing 3.2.1</strong> 的。可直接 <strong>import</strong> 到 项目中使用。<strong><a href="https://github.com/cnLGMing/lib_zxing" target="_blank" rel="external">lib_zxing 传送门</a></strong> </p>
<ol>
<li><p><strong>导入 <code>lib_zxing</code> ，设置为 module；</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">compile <span class="title">project</span><span class="params">(<span class="string">':lib_zxing'</span>)</span></span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>扫描二维码，核心代码</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_CODE = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">/* 扫描二维码按钮 */</span></div><div class="line">mBtnScan.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, CaptureActivity.class);</div><div class="line">        startActivityForResult(intent, REQUEST_CODE);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>tips：</strong>大家应该注意到了，这里使用了 <strong>startActivityForResult</strong> ，明显需要重写 <strong>onActivityResult</strong>，用于回到扫描得到的结果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line">    <span class="comment">// CaptureActivity中使用RESULT_OK作为结果返回码</span></div><div class="line">    <span class="keyword">if</span> (resultCode == RESULT_OK) &#123;  <span class="comment">// RESULT_OK == -1</span></div><div class="line">        Bundle bundle = data.getExtras();</div><div class="line">        <span class="comment">// CaptureActivity中使用"result"作为 key</span></div><div class="line">        String scanResult = bundle.getString(<span class="string">"result"</span>);</div><div class="line">        mTvScanResult.setText(<span class="string">"扫描结果: "</span> + scanResult);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>生成二维码</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 生成二维码按钮 */</span></div><div class="line">mBtnCreate.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">/**</span></div><div class="line">             * 第一个参数:内容</div><div class="line">             * 第二个参数:二维码图片的长宽(其实是正方形)</div><div class="line">             */</div><div class="line">            Bitmap bitmap = QRCodeEncoder.encodeAsBitmap(<span class="string">"http://www.liuguangmingcn.com"</span>, <span class="number">500</span>);</div><div class="line">            mIvCreateBarcode.setImageBitmap(bitmap);</div><div class="line">        &#125; <span class="keyword">catch</span> (WriterException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>解析二维码</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;DecodeHintType, ?&gt; HINTS = <span class="keyword">new</span> EnumMap&lt;&gt;(DecodeHintType.class);</div><div class="line"><span class="comment">/* 长按二维码时,解析二维码数据 */</span></div><div class="line">mIvCreateBarcode.setOnLongClickListener(<span class="keyword">new</span> View.OnLongClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="comment">// 开启cache</span></div><div class="line">        mIvCreateBarcode.setDrawingCacheEnabled(<span class="keyword">true</span>);</div><div class="line">        <span class="comment">// 通过cache机制获取缓存图片</span></div><div class="line">        Bitmap bitmap = Bitmap.createBitmap(mIvCreateBarcode.getDrawingCache());</div><div class="line">        <span class="comment">// 关闭cache.获取cache通常会占用一定的内存，所以通常不需要的时候有必要对其进行清理.</span></div><div class="line">        <span class="comment">// 通过destroyDrawingCache或setDrawingCacheEnabled(false)实现。</span></div><div class="line">        mIvCreateBarcode.setDrawingCacheEnabled(<span class="keyword">false</span>);</div><div class="line">        decodeQRCode(bitmap);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 解析二维码.因为解析可能会耗时,所以使用了AsyncTask进行处理</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> bitmap 带解析的二维码图片</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">decodeQRCode</span><span class="params">(<span class="keyword">final</span> Bitmap bitmap)</span> </span>&#123;</div><div class="line">    <span class="keyword">new</span> AsyncTask&lt;Void, Void, String&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> String <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">int</span> width = bitmap.getWidth();</div><div class="line">                <span class="keyword">int</span> height = bitmap.getHeight();</div><div class="line">                <span class="keyword">int</span>[] pixels = <span class="keyword">new</span> <span class="keyword">int</span>[width * height];</div><div class="line">                bitmap.getPixels(pixels, <span class="number">0</span>, width, <span class="number">0</span>, <span class="number">0</span>, width, height);</div><div class="line">                <span class="comment">// 将 ARGB 像素阵列转换为 RGB</span></div><div class="line">                RGBLuminanceSource source = <span class="keyword">new</span> RGBLuminanceSource(width, height, pixels);</div><div class="line">                <span class="comment">// 进行解码</span></div><div class="line">                Result result = <span class="keyword">new</span> MultiFormatReader().decode(</div><div class="line">                        <span class="keyword">new</span> BinaryBitmap(<span class="keyword">new</span> HybridBinarizer(source)), HINTS);</div><div class="line">                <span class="keyword">return</span> result.getText();</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"解析出错."</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(String result)</span> </span>&#123;</div><div class="line">            Toast.makeText(getApplicationContext(), result, Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125;.execute();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>zxing</strong> 中的二维码扫描、解析、生成的简单使用到此就结束了。</p>
<blockquote>
<p><strong>由于权限问题，需要将 <code>targetSdkVersion</code> 设置为低于 23。</strong></p>
</blockquote>
<hr>
<h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/cnLGMing/AndroidDemo/tree/master/zxingDemo" target="_blank" rel="external">Demo传送门</a></p>
<p><a href="https://github.com/cnLGMing/lib_zxing" target="_blank" rel="external">lib_zxing 传送门</a></p>
<hr>
<p><strong>参考博文：</strong><br><a href="http://kuangjianwei.blog.163.com/blog/static/190088953201361015055110/" target="_blank" rel="external">zxing源码分析——QR码部分 </a></p>
<p><a href="http://blog.csdn.net/qq_26787115/article/details/50677143" target="_blank" rel="external">Android高级控件（三）—— 使用Google ZXing实现二维码的扫描和生成相关功能体系</a></p>
<hr>
<blockquote>
<p><strong>作者简介</strong>：</p>
<p><strong>刘广明</strong>(<a href="http://weibo.com/u/1665380350" target="_blank" rel="external">@cnLGMing</a>)，一步一步往上爬。</p>
<p><a href="http://www.liuguangmingcn.com/" target="_blank" rel="external">个人博客</a> 、<a href="https://github.com/cnLGMing" target="_blank" rel="external">GitHub</a> 、<a href="https://www.zhihu.com/people/LGMing" target="_blank" rel="external">知乎</a></p>
<p><strong>文章若有不对之处，欢迎指正，谢谢~</strong></p>
<p>**版权声明：原创作品，转载时请务必注明原始出处。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android6.0新的权限机制]]></title>
      <url>http://yoursite.com/2016/06/25/Android6.0%E6%96%B0%E7%9A%84%E6%9D%83%E9%99%90%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>早已听说 Android 6.0 更新了权限机制，但由于没有学习，在工作中一直尚未使用，为了防止新的权限机制带来的问题，将 <code>targetSdkVersion</code> 调为了 <strong>22</strong>，这显然是治标不治本的方法，所以今天抽空学习了 Android 6.0 的运行时权限处理机制。<br><a id="more"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Android 6.0 已发布多时，新版本的 SDK 给开发者带了一些新控件的同时，也带来了新的<strong>权限机制</strong>。在上几篇文章中，介绍了一些 Android 6.0 带来的新控件，现在我们来学习下全新的权限机制。</p>
<hr>
<h1 id="新权限机制的变化"><a href="#新权限机制的变化" class="headerlink" title="新权限机制的变化"></a>新权限机制的变化</h1><p>不知你是否和我一样反感一些APP滥用权限。</p>
<p>Android 6.0 之前，若你要使用 APP，你只能被迫同意这个 APP 的所有权限；不同意则意味着不能安装。倘若遇到有良心的开发者开发的 APP ，同意是没有问题的；但是当一个单机的斗地主 APP，需要访问通讯录、发送短信等权限时，你还会同意吗？</p>
<p>Android 6.0 之后，我们可以直接安装一款 APP，当这个 APP 需要使用某一权限时，会弹出提示框询问用户是否同意。当我们认为是不合理的权限时，我们完全可以拒绝此 APP 使用该权限。当我们之前同意(或拒绝)这个 APP 使用某一权限，但一段时间后，觉得不合理时，完全可以去权限设置中心进行对该 APP 进行解除(或授权)该权限。</p>
<blockquote>
<p>为了更好保护用户的隐私及不影响用户体验，Android 将权限划分为<strong>两种</strong>：</p>
</blockquote>
<ul>
<li><strong>Normal Permissions</strong> ，表示正常权限，也就是不涉及用户隐私。这种权限是不需要用户进行授权的，如：手机震动、蓝牙等。</li>
<li><strong>Dangerous Permission</strong> ，表示危险权限，也就是涉及用户隐私。这种权限是需要用户进行授权的，如：访问通讯录、发送短信等。</li>
</ul>
<blockquote>
<p>其中，Dangerous Permission 危险权限又分为几组。那么分组对权限机制的影响有哪些呢？</p>
</blockquote>
<p>假设现在 <strong>A和B是同一组危险权限</strong>。是这样的，当我们的 APP 已被用户授权了 <strong>A 权限</strong>，那么当我们使用到 <strong>B权限</strong> 时，系统会立刻授权，而不需要用户授权。例如：当我们的 APP 已授权了 <code>SEND_SMS</code> 权限时，当我们需要使用到 <code>RECEIVE_SMS</code> 权限时，系统会立刻授权。也就是说，只要同一组中的权限，只要其中有一个有授权，那么其他组员同样也会被授权。</p>
<p><u><em>为了防止后期版本中组权限的改变，强烈建议使用每一个危险权限都进行权限申请。</em></u></p>
<h2 id="Normal-Permissions"><a href="#Normal-Permissions" class="headerlink" title="Normal Permissions"></a>Normal Permissions</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">ACCESS_LOCATION_EXTRA_COMMANDS</div><div class="line">ACCESS_NETWORK_STATE</div><div class="line">ACCESS_NOTIFICATION_POLICY</div><div class="line">ACCESS_WIFI_STATE</div><div class="line">BLUETOOTH</div><div class="line">BLUETOOTH_ADMIN</div><div class="line">BROADCAST_STICKY</div><div class="line">CHANGE_NETWORK_STATE</div><div class="line">CHANGE_WIFI_MULTICAST_STATE</div><div class="line">CHANGE_WIFI_STATE</div><div class="line">DISABLE_KEYGUARD</div><div class="line">EXPAND_STATUS_BAR</div><div class="line">GET_PACKAGE_SIZE</div><div class="line">INSTALL_SHORTCUT</div><div class="line">INTERNET</div><div class="line">KILL_BACKGROUND_PROCESSES</div><div class="line">MODIFY_AUDIO_SETTINGS</div><div class="line">NFC</div><div class="line">READ_SYNC_SETTINGS</div><div class="line">READ_SYNC_STATS</div><div class="line">RECEIVE_BOOT_COMPLETED</div><div class="line">REORDER_TASKS</div><div class="line">REQUEST_INSTALL_PACKAGES</div><div class="line">SET_ALARM</div><div class="line">SET_TIME_ZONE</div><div class="line">SET_WALLPAPER</div><div class="line">SET_WALLPAPER_HINTS</div><div class="line">TRANSMIT_IR</div><div class="line">UNINSTALL_SHORTCUT</div><div class="line">USE_FINGERPRINT</div><div class="line">VIBRATE</div><div class="line">WAKE_LOCK</div><div class="line">WRITE_SYNC_SETTINGS</div></pre></td></tr></table></figure>
<h2 id="Dangerous-Permission"><a href="#Dangerous-Permission" class="headerlink" title="Dangerous Permission"></a>Dangerous Permission</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 联系人</span></div><div class="line">group:android.permission-group.CONTACTS  </div><div class="line">  permission:android.permission.WRITE_CONTACTS</div><div class="line">  permission:android.permission.GET_ACCOUNTS</div><div class="line">  permission:android.permission.READ_CONTACTS</div><div class="line"><span class="comment">// 电话</span></div><div class="line">group:android.permission-group.PHONE</div><div class="line">  permission:android.permission.READ_CALL_LOG</div><div class="line">  permission:android.permission.READ_PHONE_STATE</div><div class="line">  permission:android.permission.CALL_PHONE</div><div class="line">  permission:android.permission.WRITE_CALL_LOG</div><div class="line">  permission:android.permission.USE_SIP</div><div class="line">  permission:android.permission.PROCESS_OUTGOING_CALLS</div><div class="line">  permission:com.android.voicemail.permission.ADD_VOICEMAIL</div><div class="line"><span class="comment">// 日历</span></div><div class="line">group:android.permission-group.CALENDAR</div><div class="line">  permission:android.permission.READ_CALENDAR</div><div class="line">  permission:android.permission.WRITE_CALENDAR</div><div class="line"><span class="comment">// 相机</span></div><div class="line">group:android.permission-group.CAMERA</div><div class="line">  permission:android.permission.CAMERA</div><div class="line"><span class="comment">// 传感器</span></div><div class="line">group:android.permission-group.SENSORS</div><div class="line">  permission:android.permission.BODY_SENSORS</div><div class="line"><span class="comment">// 位置</span></div><div class="line">group:android.permission-group.LOCATION</div><div class="line">  permission:android.permission.ACCESS_FINE_LOCATION</div><div class="line">  permission:android.permission.ACCESS_COARSE_LOCATION</div><div class="line"><span class="comment">// 存储</span></div><div class="line">group:android.permission-group.STORAGE</div><div class="line">  permission:android.permission.READ_EXTERNAL_STORAGE</div><div class="line">  permission:android.permission.WRITE_EXTERNAL_STORAGE</div><div class="line"><span class="comment">// 麦克风</span></div><div class="line">group:android.permission-group.MICROPHONE</div><div class="line">  permission:android.permission.RECORD_AUDIO</div><div class="line"><span class="comment">// 短信</span></div><div class="line">group:android.permission-group.SMS</div><div class="line">  permission:android.permission.READ_SMS</div><div class="line">  permission:android.permission.RECEIVE_WAP_PUSH</div><div class="line">  permission:android.permission.RECEIVE_MMS</div><div class="line">  permission:android.permission.RECEIVE_SMS</div><div class="line">  permission:android.permission.SEND_SMS</div><div class="line">  permission:android.permission.READ_CELL_BROADCASTS</div></pre></td></tr></table></figure>
<hr>
<h1 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h1><p>在学习之前，一直听说 Android 6.0 换了新的权限机制，使用起来很麻烦。现在学了之后感觉只是在使用权限之前加了一层判断，繁琐点。不多说了，开始吧。</p>
<ol>
<li><p>跟之前一样，在 <code>AndroidManifest</code> 清单文件中，添加需要的权限。</p>
<blockquote>
<p>试图申请一个没有声明的权限，可能会导致程序崩溃。</p>
</blockquote>
</li>
<li><p>核实是否已授权权限</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 例如：核实是否拥有发送短信的权限</span></div><div class="line"><span class="keyword">if</span> (ContextCompat.checkSelfPermission(MainActivity.<span class="keyword">this</span>,</div><div class="line">            Manifest.permission.SEND_SMS)</div><div class="line">        != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">    <span class="comment">// 需要申请授权</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 表示已授权</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PS：核实的权限的 API ：</p>
<p><code>ContextCompat.checkSelfPermission(@NonNull Context context, @NonNull String permission)；</code> </p>
<p>翻看源码可看到，此方法有两个返回：</p>
<ul>
<li>PackageManager.PERMISSION_DENIED，值为 <strong>-1</strong>，表示需要申请授权</li>
<li>PackageManager.PERMISSION_GRANTED，值为 <strong>0</strong>，表示已授权</li>
</ul>
</li>
<li><p>申请授权</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>,</div><div class="line">        <span class="keyword">new</span> String[]&#123;Manifest.permission.SEND_SMS&#125;,</div><div class="line">        MY_PERMISSIONS_REQUEST_SEND_SMS);</div></pre></td></tr></table></figure>
<p>PS：申请权限的 API：</p>
<p><code>ActivityCompat.requestPermissions(final @NonNull Activity activity, final @NonNull String[] permissions, final int requestCode)</code> </p>
<p>参数说明：</p>
<ul>
<li>第一个：Context</li>
<li>第二个：需要申请的权限字符串数组 [说明可以同时申请多个权限，但系统会通过对话框逐一询问用户是否授权]</li>
<li>第三个：申请返回的请求码</li>
</ul>
</li>
<li><p>处理权限申请回调：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode,</span></span></div><div class="line">                             @NonNull String[] permissions,</div><div class="line">                             @NonNull <span class="keyword">int</span>[] grantResults) &#123;</div><div class="line">    <span class="keyword">switch</span> (requestCode) &#123;</div><div class="line">        <span class="keyword">case</span> MY_PERMISSIONS_REQUEST_SEND_SMS: &#123;</div><div class="line">            <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span></div><div class="line">                    &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">                <span class="comment">// 拥有权限</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 当弹出的申请权限申请提示框被拒绝时的逻辑             </span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行申请回调后，首先是通过 <code>requestCode</code> 找到到你的申请，然后进行验证 <code>grantResults</code> 对应的申请结果，这个数组对应了申请时的权限数组，你同时申请几个权限，<code>grantResults</code> 的长度就为多少，其分别记录了每个权限的申请结果。也就是说，当你申请成功时，你就可进行下一步的逻辑。</p>
</li>
</ol>
<hr>
<p>还有一个很重要的 API 需要介绍：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(thisActivity,</div><div class="line">        Manifest.permission.READ_CONTACTS)) </div><div class="line">	<span class="comment">// 向用户解释为何申请该权限</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="发送短信-的例子"><a href="#发送短信-的例子" class="headerlink" title="[发送短信]的例子"></a>[发送短信]的例子</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 用于申请权限后的回调</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MY_PERMISSIONS_REQUEST_SEND_SMS = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> EditText mEdNumber;</div><div class="line">    <span class="keyword">private</span> EditText mEdContent;</div><div class="line">    <span class="keyword">private</span> Button   mBtnSend;</div><div class="line">    <span class="keyword">private</span> String   mNumber;</div><div class="line">    <span class="keyword">private</span> String   mContent;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initViews();</div><div class="line">        initData();</div><div class="line">        initListener();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initListener</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 点击后,发送短信</span></div><div class="line">        mBtnSend.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (ContextCompat.checkSelfPermission(MainActivity.<span class="keyword">this</span>,</div><div class="line">                        Manifest.permission.SEND_SMS)</div><div class="line">                        != PackageManager.PERMISSION_GRANTED) &#123; <span class="comment">// 表示不同意,需要申请授权</span></div><div class="line"></div><div class="line">                    ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>,</div><div class="line">                            <span class="keyword">new</span> String[]&#123;Manifest.permission.SEND_SMS&#125;,</div><div class="line">                            MY_PERMISSIONS_REQUEST_SEND_SMS);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// 发送短信</span></div><div class="line">                    sendSms(mNumber, mContent);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">        mNumber = mEdNumber.getText().toString().trim();</div><div class="line">        mContent = mEdContent.getText().toString().trim();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span> </span>&#123;</div><div class="line">        mEdNumber = (EditText) findViewById(R.id.ed_number);</div><div class="line">        mEdContent = (EditText) findViewById(R.id.ed_content);</div><div class="line">        mBtnSend = (Button) findViewById(R.id.btn_send);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 发送短信</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> number  手机号码</div><div class="line">     * <span class="doctag">@param</span> content 短信内容</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">(String number, String content)</span> </span>&#123;</div><div class="line">        <span class="comment">// 获取短信管理器</span></div><div class="line">        SmsManager smsManager = SmsManager.getDefault();</div><div class="line"></div><div class="line">        <span class="comment">// 拆分短信内容（手机短信内容长度不能超过70字）</span></div><div class="line">        ArrayList&lt;String&gt; divideMessages = smsManager.divideMessage(content);</div><div class="line">        <span class="keyword">for</span> (String mes : divideMessages) &#123;</div><div class="line">            smsManager.sendTextMessage(number, <span class="keyword">null</span>, mes, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode,</span></span></div><div class="line">                                           @NonNull String[] permissions,</div><div class="line">                                           @NonNull <span class="keyword">int</span>[] grantResults) &#123;</div><div class="line">        <span class="keyword">switch</span> (requestCode) &#123;</div><div class="line">            <span class="keyword">case</span> MY_PERMISSIONS_REQUEST_SEND_SMS: &#123;</div><div class="line">                <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span></div><div class="line">                        &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">                    <span class="comment">// 拥有权限,直接发送</span></div><div class="line">                    sendSms(mNumber, mContent);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// 当弹出的申请权限申请提示框被拒绝时的逻辑</span></div><div class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"拒绝了发送短信的权限"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意：</p>
<ul>
<li>并非所有的通过Intent的方式都不需要申请权限。一般情况下，你是通过Intent打开另一个app，让用户通过该app去做一些事情，你只关注结果（onActivityResult），那么权限是不需要你处理的，而是由打开的app去处理。更多请参考 <a href="http://developer.android.com/intl/zh-cn/training/permissions/best-practices.html#perms-vs-intents" target="_blank" rel="external">Consider Using an Intent</a>。</li>
</ul>
<hr>
<h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/cnLGMing/AndroidDemo/tree/master/AndroidNewPermission" target="_blank" rel="external">Github 传送门</a></p>
<hr>
<p><strong>参考博文：</strong><br><a href="http://blog.csdn.net/lmj623565791/article/details/50709663" target="_blank" rel="external">鸿洋- Android 6.0 运行时权限处理完全解析</a></p>
<hr>
<blockquote>
<p><strong>作者简介</strong>：</p>
<p><strong>刘广明</strong>(<a href="http://weibo.com/u/1665380350" target="_blank" rel="external">@cnLGMing</a>)，一步一步往上爬。</p>
<p><a href="http://www.liuguangmingcn.com/" target="_blank" rel="external">个人博客</a> 、<a href="https://github.com/cnLGMing" target="_blank" rel="external">GitHub</a> 、<a href="https://www.zhihu.com/people/LGMing" target="_blank" rel="external">知乎</a></p>
<p><strong>文章若有不对之处，欢迎指正，谢谢~</strong></p>
<p><strong>版权声明：原创作品，转载时请务必注明原始出处。</strong></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SnackBar的使用及封装]]></title>
      <url>http://yoursite.com/2016/06/20/SnackBar%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B0%81%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>SnackBar<br><a id="more"></a></p>
<h3 id="SnackBar-的简述"><a href="#SnackBar-的简述" class="headerlink" title="SnackBar 的简述"></a>SnackBar 的简述</h3><p>Snackbar 是 Android Support Design Library 库中的一个控件。</p>
<p><strong>优势：</strong></p>
<ul>
<li>通常在屏幕底部快速弹出消息(位置取决于容纳 SnackBar 控件的位置)</li>
<li>比 Toast 更加好用</li>
<li>比 Dialog 更轻量级</li>
<li>可与用户进行简单的交互</li>
<li>可滑动删除</li>
</ul>
<hr>
<h3 id="SnackBar-的基本使用"><a href="#SnackBar-的基本使用" class="headerlink" title="SnackBar 的基本使用"></a>SnackBar 的基本使用</h3><p>在使用 SnackBar 之前，需要导入 <code>com.android.support:design</code> 库：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile 'com.android.support:design:23.3.0'</div></pre></td></tr></table></figure></p>
<p><strong>PS：</strong>需要一个控件容器来容纳 SnackBar 。Google 推荐使用 CoordinatorLayout 来作为 SnackBar 的容器。在 SnackBar 的源码中是这样解释的：<br><img src="https://ooo.0o0.ooo/2016/06/03/57511fe75d163.png" alt=""></p>
<blockquote>
<p>CoordinatorLayout 也是 Android Support Design Library 库中的一个控件。CoordinatorLayout 使用新的思路通过协调调度子布局的形式实现触摸影响布局的形式产生动画效果。其有两个功能： 作为顶层布局；调度协调子布局。</p>
</blockquote>
<ul>
<li><p>最简单的 SnackBar 使用方式与 Toast 十分相似。</p>
<ul>
<li>图例：</li>
</ul>
<p><img src="https://ooo.0o0.ooo/2016/06/03/57511e3cb5619.png" alt=""></p>
<ul>
<li>使用方式：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 用于创建SnackBar </div><div class="line">  * <span class="doctag">@param</span> view  容纳SnackBar的父容器 </div><div class="line">  * <span class="doctag">@param</span> text  显示在左边的Message</div><div class="line">  * <span class="doctag">@param</span> duration  持续时间：Snackbar.LENGTH_SHORT或LENGTH_LONG </div><div class="line">  */</div><div class="line">Snackbar.make(View view,CharSequence text,<span class="keyword">int</span> duration).show(); <span class="comment">// 显示</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>右侧还有按钮的 SnackBar </p>
<ul>
<li>图例：</li>
</ul>
<p><img src="https://ooo.0o0.ooo/2016/06/03/5751414278108.gif" alt=""></p>
<ul>
<li>使用方式：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Snackbar.make(View view,CharSequence text,<span class="keyword">int</span> duration)</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 设置 SnackBar 右侧的按钮</div><div class="line">		 * <span class="doctag">@param</span> text 按钮名字</div><div class="line">		 * <span class="doctag">@param</span> listener 点击监听事件</div><div class="line">		 */</div><div class="line">		.setAction(CharSequence text,<span class="keyword">new</span> View.OnClickListener()&#123;</div><div class="line">		 	<span class="meta">@Override</span></div><div class="line">		 	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">		 	  <span class="comment">// 点击 SnackBar 右侧按钮后的逻辑</span></div><div class="line">		 	&#125;</div><div class="line">		&#125;)</div><div class="line">		.show();	<span class="comment">// 显示</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>若想在 SnackBar 出现或消失时，做其他逻辑，可以使用其Callback方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Snackbar.make(View view,CharSequence text,<span class="keyword">int</span> duration)</div><div class="line">  		.setCallback(<span class="keyword">new</span> Snackbar.Callback() &#123;</div><div class="line">  		  <span class="meta">@Override</span></div><div class="line">  		  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDismissed</span><span class="params">(Snackbar snackbar, <span class="keyword">int</span> event)</span> </span>&#123;</div><div class="line">  		    <span class="keyword">super</span>.onDismissed(snackbar, event);</div><div class="line">  		    <span class="comment">// 消失时</span></div><div class="line">  		  &#125;</div><div class="line">  		  <span class="meta">@Override</span></div><div class="line">  		  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onShown</span><span class="params">(Snackbar snackbar)</span> </span>&#123;</div><div class="line">  		    <span class="keyword">super</span>.onShown(snackbar);</div><div class="line">  		    <span class="comment">// 出现时</span></div><div class="line">  		  &#125;</div><div class="line">  		&#125;)</div><div class="line">  		.show();	<span class="comment">// 显示</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="SnackBar-的颜色改造"><a href="#SnackBar-的颜色改造" class="headerlink" title="SnackBar 的颜色改造"></a>SnackBar 的颜色改造</h3><p>在使用 SnackBar 过程中，会发现 SnackBar 和 Toast 都是样式过于单一。然而开发过程中，对不同的信息往往需要使用不同的颜色进行区分，引起用户的注意。Android 只提供了修改 Action 文字颜色的方法<code>setActionTextColor()</code> ，显然是不够的。那么只能我们自己阅读源码后，自行添加了。<br>阅读源码后，有所发现：</p>
<ul>
<li><p>SnackBar 中定义了一个内部类 <code>SnackbarLayout</code> ，且这个内部类是继承 <code>LinearLayout</code> 的；</p>
</li>
<li><p>SnackbarLayout 中加载了 <code>R.layout.design_layout_snackbar_include</code>，那意味着 SnackBar 的布局时是有 SnackbarLayout 决定的。<br><code>R.layout.design_layout_snackbar_include</code> 布局文件的代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">merge</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/snackbar_text"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">            <span class="attr">android:paddingTop</span>=<span class="string">"14dp"</span></div><div class="line">            <span class="attr">android:paddingBottom</span>=<span class="string">"14dp"</span></div><div class="line">            <span class="attr">android:paddingLeft</span>=<span class="string">"12dp"</span></div><div class="line">            <span class="attr">android:paddingRight</span>=<span class="string">"12dp"</span></div><div class="line">            <span class="attr">android:textAppearance</span>=<span class="string">"@style/TextAppearance.Design.Snackbar.Message"</span></div><div class="line">            <span class="attr">android:maxLines</span>=<span class="string">"1"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical|left|start"</span></div><div class="line">            <span class="attr">android:ellipsize</span>=<span class="string">"end"</span></div><div class="line">            <span class="attr">android:textAlignment</span>=<span class="string">"viewStart"</span>/&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">          <span class="attr">android:id</span>=<span class="string">"@+id/snackbar_action"</span></div><div class="line">          <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">          <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">          <span class="attr">android:layout_marginLeft</span>=<span class="string">"0dp"</span></div><div class="line">          <span class="attr">android:layout_marginStart</span>=<span class="string">"0dp"</span></div><div class="line">          <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical|right|end"</span></div><div class="line">          <span class="attr">android:paddingTop</span>=<span class="string">"14dp"</span></div><div class="line">          <span class="attr">android:paddingBottom</span>=<span class="string">"14dp"</span></div><div class="line">          <span class="attr">android:paddingLeft</span>=<span class="string">"12dp"</span></div><div class="line">          <span class="attr">android:paddingRight</span>=<span class="string">"12dp"</span></div><div class="line">          <span class="attr">android:visibility</span>=<span class="string">"gone"</span> // 注意到没? 当设置了<span class="attr">SnackBar</span>有按钮时才会显示</div><div class="line">          <span class="attr">android:textColor</span>=<span class="string">"?attr/colorAccent"</span></div><div class="line">          <span class="attr">style</span>=<span class="string">"?attr/borderlessButtonStyle"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">merge</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>了解到这个后，设置消息和 SnackBar 的背景颜色就是很简单了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置 SnackBar 的颜色</div><div class="line"> * 因为 Action 已有设置的方法，所以这里只需设置消息和背景的颜色</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> snackbar        SnackBar实例</div><div class="line"> * <span class="doctag">@param</span> messageColor    消息的颜色</div><div class="line"> * <span class="doctag">@param</span> backgroundColor 背景颜色</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setSnackbarColor</span><span class="params">(Snackbar snackbar, <span class="keyword">int</span> messageColor, </span></span></div><div class="line">                                    <span class="keyword">int</span> backgroundColor) &#123;</div><div class="line">	<span class="comment">/** 获取Snackbar的view */</span></div><div class="line">	View view = snackbar.getView();</div><div class="line">	<span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="comment">// 修改view的背景色</span></div><div class="line">		view.setBackgroundColor(backgroundColor);</div><div class="line">		<span class="comment">// 获取Snackbar的message控件，修改字体颜色</span></div><div class="line">		((TextView)view.findViewById(R.id.snackbar_text))</div><div class="line">						.setTextColor(messageColor);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="SnackBar-的布局改造"><a href="#SnackBar-的布局改造" class="headerlink" title="SnackBar 的布局改造"></a>SnackBar 的布局改造</h3><blockquote>
<p>Google 在 Material Design 设计规范中提到：当有2个或者2个以上的操作出现时，应该使用提示框而不是 Snackbar，即使其中的一个是取消操作。如果 Snackbar 中提示的操作重要到需要打断屏幕上正在进行的操作，那么理当使用提示框而非 Snackbar。</p>
</blockquote>
<p>　　但有时候我们接到的需求是要在 SnackBar 添加其他布局，怎么办呢？（我很想遵循官方的设计规范，但却因生活压力被迫接受那些奇葩的需求）</p>
<p>　　这个时候，我们应该想到刚刚提到的，SnackBar 的布局是由 SnackbarLayout 决定的。那我们可以直接新建一个布局，然后添加进去就可以了嘛。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 为SnackBar添加布局</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> snackbar SnackBar实例</div><div class="line"> * <span class="doctag">@param</span> layoutId 布局文件</div><div class="line"> * <span class="doctag">@param</span> index    位置</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addViewToSnackbar</span><span class="params">(Snackbar snackbar, <span class="keyword">int</span> layoutId, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">	<span class="comment">/** 获取snackbar的View(其实就是SnackbarLayout) */</span></div><div class="line">	View snackbarview = snackbar.getView();</div><div class="line">	Snackbar.SnackbarLayout snackbarLayout = (Snackbar.SnackbarLayout) snackbarview;</div><div class="line"></div><div class="line">	View add_view = LayoutInflater.from(snackbarview.getContext())</div><div class="line">　　　　　　　　　　　　　　　　　　　.inflate(layoutId, <span class="keyword">null</span>);   <span class="comment">//加载布局文件新建View</span></div><div class="line">	<span class="comment">// 设置新建布局参数</span></div><div class="line">	LinearLayout.LayoutParams p = <span class="keyword">new</span> LinearLayout.LayoutParams(</div><div class="line">　　　　　　　　　　　　　　　　　　　　　　　LinearLayout.LayoutParams.WRAP_CONTENT,</div><div class="line">　　　　　　　　　　　　　　　　　　　　　　　LinearLayout.LayoutParams.WRAP_CONTENT);</div><div class="line">	<span class="comment">// 设置新建布局在Snackbar内垂直居中显示</span></div><div class="line">	p.gravity = Gravity.CENTER_VERTICAL;</div><div class="line">	<span class="comment">// 将新建布局添加进snackbarLayout相应位置</span></div><div class="line">	snackbarLayout.addView(add_view, index, p);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>使用示例：</strong><br>新建一个布局文件：（直接一个ImageView，并设置为默认图标）<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">              <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">           <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">           <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">           <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">           <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>Java文件中运用：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Snackbar snackbar = Snackbar.make(mContainer, <span class="string">"这是普通 SnackBar"</span>,Snackbar.LENGTH_SHORT);</div><div class="line">setSnackbarColor(snackbar, Color.RED, Color.BLUE);</div><div class="line">addViewToSnackbar(snackbar, R.layout.snackbar_image, <span class="number">0</span>);</div><div class="line">snackbar.show();</div></pre></td></tr></table></figure></p>
<p><strong>运行后示例：</strong><br><img src="https://ooo.0o0.ooo/2016/06/03/575140ef20ce7.gif" alt=""></p>
<h3 id="SnackBar-封装"><a href="#SnackBar-封装" class="headerlink" title="SnackBar 封装"></a>SnackBar 封装</h3><p>为了更方便、灵活的使用 SnackBar，对 SnackBar 进行封装。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.graphics.Color;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.Snackbar;</div><div class="line"><span class="keyword">import</span> android.view.Gravity;</div><div class="line"><span class="keyword">import</span> android.view.LayoutInflater;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.LinearLayout;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @创建者 　　　　Hakka_LGM</div><div class="line"> * @创建时间 　　　2016-6-3 16:35</div><div class="line"> * @描述 　　　　　对SnackBar进行封装</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnackBarUtils</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INFO    = <span class="number">1</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONFIRM = <span class="number">2</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WARNING = <span class="number">3</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ALERT   = <span class="number">4</span>;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> red    = <span class="number">0xfff44336</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> green  = <span class="number">0xff4caf50</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> blue   = <span class="number">0xff2195f3</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> orange = <span class="number">0xffffc107</span>;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">     * Snackbar：自定义颜色的短显示</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> view</div><div class="line">     * <span class="doctag">@param</span> message</div><div class="line">     * <span class="doctag">@param</span> messageColor</div><div class="line">     * <span class="doctag">@param</span> backgroundColor</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Snackbar <span class="title">shortSnackbar</span><span class="params">(View view, String message, </span></span></div><div class="line">                                       <span class="keyword">int</span> messageColor,<span class="keyword">int</span> backgroundColor) &#123;</div><div class="line">    Snackbar snackbar = Snackbar.make(view, message, Snackbar.LENGTH_SHORT);</div><div class="line">    setSnackBarColor(snackbar, messageColor, backgroundColor);</div><div class="line">    <span class="keyword">return</span> snackbar;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">     * Snackbar：自定义颜色的长显示</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> view</div><div class="line">     * <span class="doctag">@param</span> message</div><div class="line">     * <span class="doctag">@param</span> messageColor</div><div class="line">     * <span class="doctag">@param</span> backgroundColor</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Snackbar <span class="title">longSnackbar</span><span class="params">(View view, String message, <span class="keyword">int</span> messageColor,</span></span></div><div class="line">                                      <span class="keyword">int</span> backgroundColor) &#123;</div><div class="line">    Snackbar snackbar = Snackbar.make(view, message, Snackbar.LENGTH_LONG);</div><div class="line">    setSnackBarColor(snackbar, messageColor, backgroundColor);</div><div class="line">    <span class="keyword">return</span> snackbar;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">     * 短显示Snackbar，可选预设类型</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> view</div><div class="line">     * <span class="doctag">@param</span> message</div><div class="line">     * <span class="doctag">@param</span> type</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Snackbar <span class="title">shortSnackbar</span><span class="params">(View view, String message, <span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line">    Snackbar snackbar = Snackbar.make(view, message, Snackbar.LENGTH_SHORT);</div><div class="line">    switchType(snackbar, type);</div><div class="line">    <span class="keyword">return</span> snackbar;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">     * 长显示Snackbar，可选预设类型</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> view</div><div class="line">     * <span class="doctag">@param</span> message</div><div class="line">     * <span class="doctag">@param</span> type</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Snackbar <span class="title">longSnackbar</span><span class="params">(View view, String message, <span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line">    Snackbar snackbar = Snackbar.make(view, message, Snackbar.LENGTH_LONG);</div><div class="line">    switchType(snackbar, type);</div><div class="line">    <span class="keyword">return</span> snackbar;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">     * 自定义时常显示Snackbar，自定义颜色</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> view</div><div class="line">     * <span class="doctag">@param</span> message</div><div class="line">     * <span class="doctag">@param</span> messageColor</div><div class="line">     * <span class="doctag">@param</span> backgroundColor</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Snackbar <span class="title">IndefiniteSnackbar</span><span class="params">(View view, String message, <span class="keyword">int</span> duration,</span></span></div><div class="line">                                            <span class="keyword">int</span> messageColor, <span class="keyword">int</span> backgroundColor) &#123;</div><div class="line">    Snackbar snackbar = Snackbar</div><div class="line">      .make(view, message, Snackbar.LENGTH_INDEFINITE)</div><div class="line">      .setDuration(duration);</div><div class="line">    setSnackBarColor(snackbar, messageColor, backgroundColor);</div><div class="line">    <span class="keyword">return</span> snackbar;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">     * 自定义时常显示Snackbar，可选预设类型</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> view</div><div class="line">     * <span class="doctag">@param</span> message</div><div class="line">     * <span class="doctag">@param</span> type</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Snackbar <span class="title">IndefiniteSnackbar</span><span class="params">(View view, String message, <span class="keyword">int</span> duration, </span></span></div><div class="line">                                            <span class="keyword">int</span> type) &#123;</div><div class="line">    Snackbar snackbar = Snackbar.make(view, message, Snackbar.LENGTH_INDEFINITE)</div><div class="line">      .setDuration(duration);</div><div class="line">    switchType(snackbar, type);</div><div class="line">    <span class="keyword">return</span> snackbar;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">     * 设置Snackbar背景颜色</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> snackbar</div><div class="line">     * <span class="doctag">@param</span> backgroundColor</div><div class="line">     */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setSnackBarColor</span><span class="params">(Snackbar snackbar, <span class="keyword">int</span> backgroundColor)</span> </span>&#123;</div><div class="line">    View view = snackbar.getView();</div><div class="line">    <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">      view.setBackgroundColor(backgroundColor);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">     * 设置SnackBar消息的颜色</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> snackbar</div><div class="line">     * <span class="doctag">@param</span> messageColor</div><div class="line">     */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setSnackBarMsgColor</span><span class="params">(Snackbar snackbar, <span class="keyword">int</span> messageColor)</span> </span>&#123;</div><div class="line">    View view = snackbar.getView();</div><div class="line">    <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">      ((TextView) view.findViewById(R.id.snackbar_text)).setTextColor(messageColor);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">     * 设置Snackbar文字和背景颜色</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> snackbar</div><div class="line">     * <span class="doctag">@param</span> messageColor</div><div class="line">     * <span class="doctag">@param</span> backgroundColor</div><div class="line">     */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setSnackBarColor</span><span class="params">(Snackbar snackbar, <span class="keyword">int</span> messageColor, </span></span></div><div class="line">                                      <span class="keyword">int</span> backgroundColor) &#123;</div><div class="line">    View view = snackbar.getView();</div><div class="line">    <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">      view.setBackgroundColor(backgroundColor);</div><div class="line">      ((TextView) view.findViewById(R.id.snackbar_text)).setTextColor(messageColor);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">     * 为SnackBar添加布局</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> snackbar SnackBar实例</div><div class="line">     * <span class="doctag">@param</span> layoutId 布局文件</div><div class="line">     * <span class="doctag">@param</span> index    位置</div><div class="line">     */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(Snackbar snackbar, <span class="keyword">int</span> layoutId, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="comment">/** 获取snackbar的View(其实就是SnackbarLayout) */</span></div><div class="line">    View snackbarview = snackbar.getView();</div><div class="line">    Snackbar.SnackbarLayout snackbarLayout = (Snackbar.SnackbarLayout) snackbarview;</div><div class="line"></div><div class="line">    View add_view = LayoutInflater.from(snackbarview.getContext())</div><div class="line">                                  .inflate(layoutId, <span class="keyword">null</span>);   <span class="comment">//加载布局文件新建View</span></div><div class="line">    <span class="comment">// 设置新建布局参数</span></div><div class="line">    LinearLayout.LayoutParams p = <span class="keyword">new</span> LinearLayout.LayoutParams(</div><div class="line">                                      LinearLayout.LayoutParams.WRAP_CONTENT,</div><div class="line">                                      LinearLayout.LayoutParams.WRAP_CONTENT);</div><div class="line">    <span class="comment">// 设置新建布局在Snackbar内垂直居中显示</span></div><div class="line">    p.gravity = Gravity.CENTER_VERTICAL;</div><div class="line">    <span class="comment">// 将新建布局添加进snackbarLayout相应位置</span></div><div class="line">    snackbarLayout.addView(add_view, index, p);</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">//选择预设类型</span></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">switchType</span><span class="params">(Snackbar snackbar, <span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (type) &#123;</div><div class="line">      <span class="keyword">case</span> INFO:</div><div class="line">        setSnackBarColor(snackbar, blue);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> CONFIRM:</div><div class="line">        setSnackBarColor(snackbar, green);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> WARNING:</div><div class="line">        setSnackBarColor(snackbar, orange);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> ALERT:</div><div class="line">        setSnackBarColor(snackbar, Color.YELLOW, red);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/cnLGMing/SnackBarUtils" target="_blank" rel="external">Github 传送门</a></p>
<p><strong>SnackBar</strong> 的使用教程到此结束。</p>
<p><strong>参考博文：</strong><br><a href="http://www.jianshu.com/p/cd1e80e64311" target="_blank" rel="external">没时间解释了，快使用Snackbar</a></p>
<blockquote>
<p><strong>作者简介</strong>：</p>
<p><strong>刘广明</strong>(<a href="http://weibo.com/u/1665380350" target="_blank" rel="external">@cnLGMing</a>)，一步一步往上爬。</p>
<p><a href="http://www.liuguangmingcn.com/" target="_blank" rel="external">个人博客</a> 、<a href="https://github.com/cnLGMing" target="_blank" rel="external">GitHub</a> 、<a href="https://www.zhihu.com/people/LGMing" target="_blank" rel="external">知乎</a></p>
<p><strong>文章若有不对之处，欢迎指正，谢谢~</strong></p>
<p><strong>版权声明：原创作品，转载时请务必注明原始出处。</strong></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[FloatingActionButton的使用]]></title>
      <url>http://yoursite.com/2016/06/18/FloatingActionButton%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><strong>FloatingActionButton</strong> 同样是 Android 6.0 时推出的新控件，是 Android Support Design Library 库中的一个控件。</p>
<a id="more"></a>
<p>[TOC]</p>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p>同样的，我们先来看效果图：</p>
<p><img src="https://ooo.0o0.ooo/2016/06/23/576cb00a99fc1.gif" alt=""></p>
<hr>
<h3 id="Android-API-中的简述"><a href="#Android-API-中的简述" class="headerlink" title="Android API 中的简述"></a>Android API 中的简述</h3><p><a href="https://developer.android.com/reference/android/support/design/widget/FloatingActionButton.html" target="_blank" rel="external">官方介绍说明</a> </p>
<p><img src="https://ooo.0o0.ooo/2016/06/23/576c9aac9b483.png" alt="FloatingActionButton介绍"></p>
<p>从上图可知：</p>
<ol>
<li>FloatingActionButton 是一个悬浮在 UI 上层的一种特殊按钮；</li>
<li>FloatingActionButton 只有两个尺寸，一种是默认的，一种是迷你的；也就是说我们常用的<code>layout_width</code> 和 <code>layout_height</code> 对 FloatingActionButton 是不起作用；</li>
<li>FloatingActionButton 是间接继承 <strong>ImageView</strong> ，所以我们可以通过 <code>setImageDrawable(Drawable)</code> 方法设置其上面的图标</li>
<li>FloatingActionButton 的背景颜色默认是取自主题中的 <code>colorAccent</code> 字段的颜色值；当然，我们可以可以通过 <code>setBackgroundTintList(ColorStateList)</code>  方法进行设置其背景颜色</li>
</ol>
<hr>
<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol>
<li><p><strong>导入兼容库</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile 'com.android.support:design:23.3.0'</div></pre></td></tr></table></figure>
</li>
<li><p><strong>布局文件</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/fab_left_top"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:src</span>=<span class="string">"@drawable/ic_loyalty_white_24dp"</span></div><div class="line">    <span class="attr">app:fabSize</span>=<span class="string">"normal"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/fab_right_top"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">app:backgroundTint</span>=<span class="string">"#0268F9"</span></div><div class="line">    <span class="attr">app:elevation</span>=<span class="string">"10dp"</span></div><div class="line">    <span class="attr">app:fabSize</span>=<span class="string">"mini"</span></div><div class="line">    <span class="attr">app:rippleColor</span>=<span class="string">"#0000ff"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>Java 代码</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 为右上角的悬浮按钮设置图标</span></div><div class="line">    mFabRightTop.setImageDrawable(getDrawable(R.drawable.ic_loyalty_white_24dp));</div><div class="line"></div><div class="line">    <span class="comment">// 为左上角的悬浮按钮设置点击监听</span></div><div class="line">    mFabLeftTop.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (mFabRightTop.isShown()) &#123;    <span class="comment">// 右上角的悬浮按钮是否已经显示</span></div><div class="line">                mFabRightTop.hide(); <span class="comment">// 若显示，则隐藏</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mFabRightTop.show(); <span class="comment">// 否隐藏，则显示</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 为右上角的悬浮按钮设置点击监听</span></div><div class="line">    mFabRightTop.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (mFabLeftTop.isShown()) &#123;    <span class="comment">// 左上角的悬浮按钮是否已经显示</span></div><div class="line">                mFabLeftTop.hide(); <span class="comment">// 若显示，则隐藏</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mFabLeftTop.show(); <span class="comment">// 否隐藏，则显示</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>FloatingActionButton</strong> 的相关属性如下：</p>
<p><strong>在 XML 中常用的属性有：</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">android:src=""			<span class="comment">&lt;!-- 悬浮按钮上的图标 --&gt;</span></div><div class="line">app:backgroundTint=""	<span class="comment">&lt;!-- 背景颜色，默认为 Theme 主题中的 "colorAccent" --&gt;</span></div><div class="line">app:elevation=""		<span class="comment">&lt;!-- 阴影的深度，默认是有阴影的 --&gt;</span></div><div class="line">app:fabSize=""			<span class="comment">&lt;!-- 大小，仅支持两种大小：normal、mini --&gt;</span></div><div class="line">app:rippleColor=""		<span class="comment">&lt;!-- 点击产生的波纹颜色 --&gt;</span></div></pre></td></tr></table></figure>
<p><strong>在 Java 代码中常用的属性有：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">setBackgroundDrawable(Drawable background);	<span class="comment">// 图标</span></div><div class="line">setOnClickListener(OnClickListener l);		<span class="comment">// 点击监听器</span></div><div class="line">setBackgroundTintList(ColorStateList tint);	<span class="comment">// 背景颜色</span></div><div class="line">setElevation(<span class="keyword">float</span> elevation);				<span class="comment">// 阴影的深度</span></div><div class="line">setRippleColor(<span class="keyword">int</span> color);					<span class="comment">// 点击产生的波纹颜色</span></div></pre></td></tr></table></figure>
<h3 id="源码中的默认参数"><a href="#源码中的默认参数" class="headerlink" title="源码中的默认参数"></a>源码中的默认参数</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"design_fab_elevation"</span>&gt;</span>6dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span>		<span class="comment">&lt;!-- 默认阴影深度6dp --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"design_fab_image_size"</span>&gt;</span>24dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span>	<span class="comment">&lt;!-- 默认图标大小24dp --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"design_fab_size_mini"</span>&gt;</span>40dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span>		<span class="comment">&lt;!-- mini的悬浮按钮大小40dp --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"design_fab_size_normal"</span>&gt;</span>56dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span>	<span class="comment">&lt;!-- 默认的悬浮按钮大小56dp --&gt;</span></div></pre></td></tr></table></figure>
<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/cnLGMing/AndroidDemo/tree/master/FloatingActionButton_Demo" target="_blank" rel="external">GitHub 传送门</a></p>
<p><strong>FloatingActionButton</strong> 的基础使用教程到此结束了。</p>
<blockquote>
<p><strong>作者简介</strong>：</p>
<p><strong>刘广明</strong>(<a href="http://weibo.com/u/1665380350" target="_blank" rel="external">@ cnLGMing</a>)，一步一步往上爬。</p>
<p><a href="http://www.liuguangmingcn.com/" target="_blank" rel="external">个人博客</a> 、<a href="https://github.com/ cnLGMing" target="_blank" rel="external">GitHub</a> 、<a href="https://www.zhihu.com/people/LGMing" target="_blank" rel="external">知乎</a></p>
<p><strong>文章若有不对之处，欢迎指正，谢谢~</strong></p>
<p><strong>版权声明：原创作品，转载时请务必注明原始出处。</strong></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TextInputLayout的使用]]></title>
      <url>http://yoursite.com/2016/06/15/TextInputLayout%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>接下来这几篇博客，我将学习 Android 5.0 以及 6.0 的一些新控件。每个新控件一篇博客，能拓展的，我也会学习如何扩展。学习完后，我将综合到一个案例中。</p>
<a id="more"></a>
<p><strong>TextInputLayout</strong> 是 Android 6.0 时推出的新控件，是 Android Support Design Library 库中的一个控件。</p>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p>什么也别说，没看到效果图，没有看下去的欲望。那行，先来看效果图：</p>
<p><img src="https://ooo.0o0.ooo/2016/06/23/576ba5b535d85.gif" alt=""></p>
<hr>
<h3 id="Android-API-中的简述"><a href="#Android-API-中的简述" class="headerlink" title="Android API 中的简述"></a>Android API 中的简述</h3><p><a href="https://developer.android.com/reference/android/support/design/widget/TextInputLayout.html" target="_blank" rel="external">官方介绍说明</a> </p>
<p><img src="https://ooo.0o0.ooo/2016/06/23/576b8d6771020.png" alt="TextInputLayout介绍"></p>
<p>从上图可知：</p>
<ol>
<li>TextInputLayout 是继承 <strong>LinearLayout</strong> ；</li>
<li>当被 TextInputLayout 包裹的 EditText 有 hint 提示，输入框中无内容 ，且获得焦点时，hint 将会浮到输入框的上面；</li>
<li>其是与 <code>EditText</code> 或 <code>EditText的子类</code> 进行搭配使用的，也就是说单独使用 TextInputLayout 是没有任何意义的；</li>
<li>同样的，TextInputLayout 也支持错误提示。</li>
</ol>
<hr>
<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol>
<li><p><strong>导入兼容库</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile 'com.android.support:design:23.3.0'</div></pre></td></tr></table></figure>
</li>
<li><p><strong>布局文件</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.TextInputLayout</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/til_username"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/et_username"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.TextInputLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.TextInputLayout</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/til_password"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.TextInputEditText</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tiet_password"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.TextInputLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>不知道你有没有注意到，我这里使用的两个输入框是不一样的。一个是我们常见的 <code>EditText</code> ，另一个是 MD 中的输入框 <code>TextInputEditText</code> 。 <strong>TextInputLayout</strong> 中的源码中，是这样解释的：</p>
<p><img src="https://ooo.0o0.ooo/2016/06/23/576bad907782c.png" alt=""></p>
</li>
<li><p><strong>Java 代码</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 设置TextInputLayout提示信息</span></div><div class="line">    mTilUsername.setHint(<span class="string">"用户名"</span>);</div><div class="line">    mEtUsername.addTextChangedListener(<span class="keyword">new</span> TextWatcher() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> count, <span class="keyword">int</span> after)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (s.length() &gt; <span class="number">6</span>) &#123;</div><div class="line">                <span class="comment">// 设置TextInputLayout显示错误提示</span></div><div class="line">                mTilUsername.setErrorEnabled(<span class="keyword">true</span>);</div><div class="line">                <span class="comment">// 设置TextInputLayout错误提示消息</span></div><div class="line">                mTilUsername.setError(<span class="string">"用户名不能超过6位！"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 设置TextInputLayout隐藏错误提示</span></div><div class="line">                mTilUsername.setErrorEnabled(<span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable s)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 设置TextInputLayout提示信息</span></div><div class="line">    mTilPassword.setHint(<span class="string">"密码"</span>);</div><div class="line">    mTietPassword.addTextChangedListener(<span class="keyword">new</span> TextWatcher() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> count, <span class="keyword">int</span> after)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (s.length() &gt; <span class="number">6</span>) &#123;</div><div class="line">                <span class="comment">// 设置TextInputEditText的错误提示消息</span></div><div class="line">                mTietPassword.setError(<span class="string">"密码不能超过6位！"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable s)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这样，<strong>TextInputLayout</strong> 的使用就算完成了。但是，还有一些属性需要说下。在上面的例子中，我采用的是 Java 代码进行设置的方式进行的，也可以使用在 XML 文件进行相应的设置。</p>
<p><strong>在 XML 中常用的属性有：</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">android:hint="Hint" <span class="comment">&lt;!--设置提示文本--&gt;</span></div><div class="line">app:hintAnimationEnabled="true" ：<span class="comment">&lt;!--设置是否动画显示提示文本--&gt;</span></div><div class="line">app:hintEnabled="true" <span class="comment">&lt;!--设置提示是否可用--&gt;</span></div><div class="line">app:errorEnabled="true" <span class="comment">&lt;!--设置错误提示是否可用--&gt;</span></div></pre></td></tr></table></figure>
<p><strong>在 Java 代码中常用的属性有：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">setHint();<span class="comment">// 设置提示文本</span></div><div class="line">setHintAnimationEnabled();<span class="comment">// 设置是否动画显示提示文本</span></div><div class="line">setHintEnabled();<span class="comment">// 设置提示是否可用</span></div><div class="line">setErrorEnabled();<span class="comment">// 设置错误提示是否可用</span></div><div class="line">setError();<span class="comment">// 设置错误信息</span></div><div class="line">getEditText();<span class="comment">// 获取 TextInputLayout 中的 EditText</span></div></pre></td></tr></table></figure>
<h3 id="错误消息提示的区别"><a href="#错误消息提示的区别" class="headerlink" title="错误消息提示的区别"></a>错误消息提示的区别</h3><p>上面说到了 TextInputLayout 也支持错误消息提示，那么其与EditText、TextInputEditText 的有什么区别呢？下图就是答案。两者的错误消息提示在呈现方式上是不同的。</p>
<p><img src="https://ooo.0o0.ooo/2016/06/23/576baf630d796.png" alt=""></p>
<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/cnLGMing/AndroidDemo/tree/master/TextInputLayout_Demo" target="_blank" rel="external">GitHub 传送门</a></p>
<p><strong>TextInputLayout</strong> 的使用教程到此结束了。</p>
<blockquote>
<p><strong>作者简介</strong>：</p>
<p><strong>刘广明</strong>(<a href="http://weibo.com/u/1665380350" target="_blank" rel="external">@cnLGMing</a>)，一步一步往上爬。</p>
<p><a href="http://www.liuguangmingcn.com/" target="_blank" rel="external">个人博客</a> 、<a href="https://github.com/cnLGMing" target="_blank" rel="external">GitHub</a> 、<a href="https://www.zhihu.com/people/LGMing" target="_blank" rel="external">知乎</a></p>
<p><strong>文章若有不对之处，欢迎指正，谢谢~</strong></p>
<p><strong>版权声明：原创作品，转载时请务必注明原始出处。</strong></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Material_Design_设计语言]]></title>
      <url>http://yoursite.com/2016/06/10/Material_Design_%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80/</url>
      <content type="html"><![CDATA[<p>Material Design 是Google在Android 5.0时推出的一个全新的设计语言，它的特点就是拟物扁平化。<a id="more"></a></p>
<p>[TOC]</p>
<ul>
<li>Material Design 是谷歌新的设计语言，谷歌希望寄由此来统一各种平台上的用户体验，Material Design 的特点是干净的排版和简单的布局，以此来突出内容。</li>
<li>Material Design 对排版、材质、配色、光效、间距、文字大小、交互方式、动画轨迹都做出了建议，以帮助设计者设计出符合 Material Design 风格的应用。</li>
<li>Material Design 设计语言鼓励大家使用充满活力的鲜艳色彩，并在同一界面建议使用三种色调，并保障有一个强色调，强色一般处于处于视图最底层，例如状态栏或者 actionbar。通过强色调形成鲜明的对比，更容易突出内容的重要性。对于文字色彩的取值，Material Design 建议在浅色背景上采用黑色，在深色背景上采用白色。重要信息和标题采用87%透明度，次要文字采用54%透明度，而更次要的说明文字可以采用26%的透明度。对于想特别突出或者可点击的文字，建议使用强色调。不同层级的视图，可以通过阴影来凸显。对于带有操作且内容突出的区域，可以使用 cardview 进行隔离，对于内容不太重要或者操作比较单一的区域，可以使用分割线进行隔离。</li>
</ul>
<h2 id="Material-Design-的使用"><a href="#Material-Design-的使用" class="headerlink" title="Material Design 的使用"></a>Material Design 的使用</h2><ol>
<li>将应用的 targetSdkVersion 和 minSdkVersion 设置为21(含以上)</li>
<li>在 values 目录下的 style 资源文件中创建一个 style，让其继承自<br><code>android:Theme.Material</code></li>
<li>在AndroidManifest中指定应用的主题或者Activity的主题为我们设定的样式</li>
</ol>
<h2 id="常用的三种配色风格"><a href="#常用的三种配色风格" class="headerlink" title="常用的三种配色风格"></a>常用的三种配色风格</h2><ul>
<li>黑色风格：<code>Theme.Material</code></li>
<li>明亮风格：<code>Theme.Material.Light</code></li>
<li>明亮主题黑色ActionBar：<code>Theme.Material.Light.DarkActionBar</code></li>
</ul>
<h2 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h2><p><img src="http://i.imgur.com/LQ28qXL.png" alt=""></p>
<ol>
<li><code>android:colorPrimaryDark</code> 应用的主要暗色调，statusBarColor默认使用该颜色</li>
<li><code>android:statusBarColor</code> 状态栏颜色，默认使用colorPrimaryDark</li>
<li><code>android:colorPrimary</code> 应用的主要色调，actionBar默认使用该颜色</li>
<li><code>android:windowBackground</code> 窗口背景颜色</li>
<li><code>android:navigationBarColor</code> 底部栏颜色</li>
<li><code>android:colorForeground</code> 应用的前景色，ListView的分割线，switch滑动区默认使用该颜色</li>
<li><code>android:colorBackground</code> 应用的背景色，popMenu的背景默认使用该颜色</li>
<li><code>android:colorAccent</code> 一般控件的选种效果默认采用该颜色</li>
<li><code>android:colorControlNormal</code> 控件的默认色调　</li>
<li><code>android:colorControlHighlight</code> 控件按压时的色调</li>
<li><code>android:colorControlActivated</code> 控件选中时的颜色，默认使用colorAccent</li>
<li><code>android:colorButtonNormal</code> 默认按钮的背景颜色</li>
<li><code>android:textColor</code> Button，textView的文字颜色</li>
<li><code>android:textColorPrimaryDisableOnly</code> RadioButton checkbox等控件的文字</li>
<li><code>android:textColorPrimary</code> 应用的主要文字颜色，actionBar的标题文字默认使用该颜色</li>
</ol>
<blockquote>
<p>主题不仅可以对<code>Application</code>和<code>Activity</code>使用，也可以对某一个控件单使用，或者是在xml布局中给一个根节点控件设置<code>android:theme</code>属性，来修改它和它所有子控件的主题。 如果我们要对特定控件实例做自定义修改，更建议大家可以通过控件自身的API进行设置修改。</p>
</blockquote>
<h2 id="Material-Design兼容性"><a href="#Material-Design兼容性" class="headerlink" title="Material Design兼容性"></a>Material Design兼容性</h2><p>Material Design主题只有在API级别为21以上才可使用，在v7支持库中提供了部分控件的Material Design主题样式，如果想使应用在android的所有版本上都能统一风格，我们可以对控件效果做自定义或者使用一些第三方的兼容包。目前最有效的做法是针对21版本创建value－21资源目录，使用Material Design风格主题，在其他版本使用v7的<code>Theme.AppCompat.Light</code>风格主题。</p>
<blockquote>
<p> <strong>作者简介</strong>：</p>
<p> <strong>刘广明</strong>(<a href="http://weibo.com/u/1665380350" target="_blank" rel="external">@cnLGMing</a>)，一步一步往上爬。</p>
<p> <a href="http://www.liuguangmingcn.com/" target="_blank" rel="external">个人博客</a> 、<a href="https://github.com/cnLGMing" target="_blank" rel="external">GitHub</a> 、<a href="https://www.zhihu.com/people/LGMing" target="_blank" rel="external">知乎</a></p>
<p> <strong>文章若有不对之处，欢迎指正，谢谢~</strong></p>
<p> <strong>版权声明：原创作品，转载时请务必注明原始出处。</strong></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android中的strings.xml详解]]></title>
      <url>http://yoursite.com/2016/06/03/Android%E4%B8%AD%E7%9A%84strings.xml%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>Android 为了让 APP 国际化（更好的在不同语言环境中使用），同时为了方便开发者进行适配多语言，提供了 strings.xml ，并建议开发者在 UI 界面相关的使用到的文本使用 strings.xml ，进行统一处理。尽量避免采用硬编码。strings.xml 除了为了多语言适配，还有其他一些重要的作用。</p>
<a id="more"></a>
<h3 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h3><p>基本使用的方法，相信在初学 Android 时，就学过，也比较基础，那我在这就一笔带过了。</p>
<p><strong>例如：</strong>需要在界面中显示中文 <strong>“你有多少篇文章？”</strong> </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--在 values 的 strings.xml 中的设置--&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"article_total"</span>&gt;</span>你有多少篇文章？<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在 java 代码中通过以下代码获取</span></div><div class="line">getResources().getString(R.string.article_total);</div></pre></td></tr></table></figure>
<hr>
<h3 id="国际化（多语言适配）"><a href="#国际化（多语言适配）" class="headerlink" title="国际化（多语言适配）"></a>国际化（多语言适配）</h3><p>现在来说下多语言适配，为了演示，这里只适配英语，其他语言相似。</p>
<p>首先，需要在项目的 <code>res</code> 目录创建适配英语的 values 文件夹，在 Android Studio 中，可以通过以下方式快速创建。</p>
<p><strong>第一步：</strong></p>
<p><img src="https://ooo.0o0.ooo/2016/06/13/575eccbdead81.png" alt="1.png"></p>
<p><strong>第二步：</strong></p>
<p><img src="https://ooo.0o0.ooo/2016/06/13/575eccbc748e8.png" alt="2.png"></p>
<p>当完成上面两个步骤后，在 <code>res</code> 目录下，会生成 <code>values-en</code> 以及 <code>strings.xml</code> （还带国旗，是不是很有心）。</p>
<p><strong>效果图：</strong></p>
<p><img src="https://ooo.0o0.ooo/2016/06/13/575eccbc1567f.png" alt="3.png"></p>
<p><strong>例如：</strong></p>
<p>当需要在中文环境下时，显示 <strong>“你有多少篇文章？”</strong> ；</p>
<p>在英语环境时，显示 <strong>“How many articles do you have ?”</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--在 values 的 strings.xml 中的设置--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"article_total"</span>&gt;</span>你有多少篇文章？<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--在 values-en 的 strings.xml 中的设置--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"article_total"</span>&gt;</span>How many articles do you have ?<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在 java 代码中通过以下代码获取</span></div><div class="line">getResources().getString(R.string.article_total);</div></pre></td></tr></table></figure>
<p><strong>wiki：</strong></p>
<ol>
<li>在进行多语言适配时，不同 values 中的同一字符串需要设置<strong>相同的 name</strong>；</li>
<li>Android 会自动根据语言环境加载不同的 strings.xml；</li>
<li>若没有找到对应的语言适配的 values 时，系统将加载默认 values 中的 strings.xml</li>
</ol>
<hr>
<h3 id="带参数"><a href="#带参数" class="headerlink" title="带参数"></a>带参数</h3><p>有时字符串会有一部门是相同的，变化的的总是在固定的位置，那么此时，我们可以使用带参数的方法进行配置。</p>
<p>例如：针对上面的<strong>“你有多少篇文章？”</strong>，进行回答：<strong>“我有一篇文章。”</strong> 、<strong>“我有两篇文章。”</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--在 values 的 strings.xml 中的设置--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"my_article_total"</span>&gt;</span>我有%s篇文章。<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"my_article_total_ing"</span>&gt;</span>我有%1$s篇文章，正在写第%2$s篇。<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"one"</span>&gt;</span>一<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"two"</span>&gt;</span>二<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"three"</span>&gt;</span>三<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--在 values-en 的 strings.xml 中的设置--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"my_article_total"</span>&gt;</span>I have %s article.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"my_article_total_ing"</span>&gt;</span>I have %1$s article. I'm writing %2$s.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"one"</span>&gt;</span>one<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"two"</span>&gt;</span>two<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"three"</span>&gt;</span>the third<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在 java 代码中通过以下代码进行获取</span></div><div class="line">getResources().getString(R.string.my_article_total, getString(R.string.one));</div><div class="line">getResources().getString(R.string.my_article_total, getString(R.string.two));</div><div class="line">getResources().getString(R.string.my_article_total_ing, getString(R.string.two), getString(R.string.three));</div></pre></td></tr></table></figure>
<p><strong>效果图：</strong></p>
<p><img src="https://ooo.0o0.ooo/2016/06/18/576577bf789d3.gif" alt="GIF.gif"></p>
<p><strong>wiki：</strong></p>
<ol>
<li>其中 <code>%s</code>  表示字符串，若只有一个参数时，直接使用 <code>%s</code>  即可；若有两个及两个以上时，需要使用编号进行区分，将 <code>%s 修改为 %编号$s</code> ，然后在 java 代码在中，按照编号进行设置即可。</li>
<li>更多参数格式，请参考 <a href="https://developer.android.com/reference/java/util/Formatter.html" target="_blank" rel="external">Formatter的使用方法</a>，</li>
</ol>
<hr>
<h3 id="根据数量，是否为复数，添加-String"><a href="#根据数量，是否为复数，添加-String" class="headerlink" title="根据数量，是否为复数，添加 String"></a>根据数量，是否为复数，添加 String</h3><p>不知道你有没有注意到，当在英文状态下，且数量为复数时，其英语单词还是单数形式，这是不对的。那么需要怎么写呢？接下来，我们就来学习当参数为数量，且需要根据这个参数是单数还是复数，显示对应的单词。</p>
<p>要适配多种语言的复数是比较困难的一件事，所以 Android 已经提供了对应的方法 –&gt; <code>plurals</code> ，使用方法如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--在 values 的 strings.xml 中的设置--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plurals</span> <span class="attr">name</span>=<span class="string">"article_count"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">quantity</span>=<span class="string">"one"</span>&gt;</span>我有 1 篇文章。<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">quantity</span>=<span class="string">"other"</span>&gt;</span>我有 %d 篇文章。<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plurals</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--在 values-en 的 strings.xml 中的设置--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plurals</span> <span class="attr">name</span>=<span class="string">"article_count"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">quantity</span>=<span class="string">"one"</span>&gt;</span>I have only one article.<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">quantity</span>=<span class="string">"other"</span>&gt;</span>I have %d articles.<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plurals</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在 java 代码中通过以下代码进行获取</span></div><div class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</div><div class="line">getResources().getQuantityString(R.plurals.article_count, count, count);</div><div class="line">count = <span class="number">100</span>;</div><div class="line">getResources().getQuantityString(R.plurals.article_count, count, count);</div></pre></td></tr></table></figure>
<p><strong>效果图：</strong></p>
<p><img src="https://ooo.0o0.ooo/2016/06/20/5768ab11ba12c.gif" alt="GIF.gif"></p>
<p><strong>wiki：</strong></p>
<ol>
<li>通过 <a href="https://developer.android.com/guide/topics/resources/string-resource.html#Plurals" target="_blank" rel="external">Android提供的API</a> 可以发现，语言之间的复数是有差异，而且很容易搞混。<code>quantity</code> 中各合法值的解释：<br><img src="https://ooo.0o0.ooo/2016/06/20/5768adb4592bc.png" alt="1.png"></li>
<li>当 <code>item</code> 中有单引号或双引号时，需要进行转义；</li>
<li>当 <code>item</code> 中，包含了数字格式的字符串 <code>%d</code> ,则在获取时需要传递两个参数，如上面的两个 <strong>count</strong> ，第一个 count 用于显示合适的字符串；第二个 count 用于插入到占位符 <code>%d</code> 中。</li>
</ol>
<hr>
<h3 id="添加特殊符号"><a href="#添加特殊符号" class="headerlink" title="添加特殊符号"></a>添加特殊符号</h3><p>在 <strong>strings.xml</strong> 中，有些字符是不能直接表示出来的。比如：空格。</p>
<p>那么需要的时候怎么使用呢？<strong>使用ASCII 码表示</strong> 。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"space01"</span>&gt;</span> 测试空格 <span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"space02"</span>&gt;</span>&amp;#160;测试空格&amp;#160;<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>效果图：</strong></p>
<p><img src="https://ooo.0o0.ooo/2016/06/21/5768dfa81d544.png" alt=""></p>
<p><strong>wiki：</strong></p>
<ol>
<li>当不能直接表示出来时，使用 <strong>ASCII 码</strong> 进行表示。格式：<code>&amp;#ASCII码;</code></li>
</ol>
<hr>
<h3 id="使用-HTML-样式"><a href="#使用-HTML-样式" class="headerlink" title="使用 HTML 样式"></a>使用 HTML 样式</h3><p>在某种特定的场景，我们需要强调一些关键字/词，需要进行加粗或颜色修改等操作。这个时候，为了减少控件，使这句话就在同一个 string 中，我们可以使用 HTML 样式对字符串进行修饰。</p>
<ul>
<li>需要显示：<strong><u><em>刘广明</em></u></strong>，下午好！</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;<span class="name">u</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>刘广明<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">u</span>&gt;</span>, 下午好<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="https://ooo.0o0.ooo/2016/06/21/5768e42f8e40a.png" alt=""></p>
<ul>
<li>修改颜色（有两种方法）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 第一种方法：在 Java 代码中直接设置</div><div class="line">mTvHello.setText(Html.fromHtml("<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">'#00ff00'</span>&gt;</span>刘广明<span class="tag">&lt;/<span class="name">font</span>&gt;</span>,下午好！"));</div><div class="line"></div><div class="line">// 第二种方法</div><div class="line"><span class="comment">&lt;!-- 在 strings.xml 中配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"hello"</span>&gt;</span></div><div class="line">    &lt;![CDATA[</div><div class="line">        &lt;font color="#0066ff"&gt;&lt;b&gt;刘广明&lt;/b&gt;&lt;/font&gt;</div><div class="line">    ]]&gt;，下午好</div><div class="line"><span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line">// 在 Java 代码中获取：</div><div class="line">mTvHello.setText(Html.fromHtml(getResources().getString(R.string.hello)));</div></pre></td></tr></table></figure>
<p><strong>效果图：</strong></p>
<p><img src="https://ooo.0o0.ooo/2016/06/21/5768ee79139c5.png" alt=""></p>
<p><strong>wiki：</strong></p>
<ol>
<li>目前 <code>strings.xml</code> 自带的支持：加粗<code>&lt;b&gt;</code>、下划线<code>&lt;u&gt;</code>、斜体<code>&lt;i&gt;</code>这三个标签</li>
</ol>
<hr>
<blockquote>
<p><strong>作者简介</strong>：</p>
<p><strong>刘广明</strong>(<a href="http://weibo.com/u/1665380350" target="_blank" rel="external">@ cnLGMing</a>)，一步一步往上爬。</p>
<p><a href="http://www.liuguangmingcn.com/" target="_blank" rel="external">个人博客</a> 、<a href="https://github.com/ cnLGMing" target="_blank" rel="external">GitHub</a> 、<a href="https://www.zhihu.com/people/LGMing" target="_blank" rel="external">知乎</a></p>
<p><strong>文章若有不对之处，欢迎指正，谢谢~</strong></p>
<p><strong>版权声明：原创作品，转载时请务必注明原始出处。</strong></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[APP版本升级及常见的一些问题]]></title>
      <url>http://yoursite.com/2016/05/16/APP%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>因开发的是公司内部的OA APP，APP没有发布到应用市场，同时也未使用到第三方推送SDK，为了提供后续的版本更新，自己写了版本更新的操作。</p>
<a id="more"></a>
<h1 id="版本更新的两个概念"><a href="#版本更新的两个概念" class="headerlink" title="版本更新的两个概念"></a>版本更新的两个概念</h1><p>关于版本更新，需要知道的两个概念，分别：</p>
<ul>
<li>versionCode：对消费者不可见，仅用于应用市场、程序内部识别版本，判断新旧等用途。</li>
<li>versionName：展示给消费者，消费者会通过它认知自己安装的版本。</li>
</ul>
<h1 id="版本更新的流程图"><a href="#版本更新的流程图" class="headerlink" title="版本更新的流程图"></a>版本更新的流程图</h1><p><strong>以下是我写版本更新时的思路流程图：</strong></p>
<p><img src="https://ooo.0o0.ooo/2016/05/16/5739e15735a60.png" alt="流程图__版本升级.png"></p>
<h1 id="关于开发中版本更新遇到的问题"><a href="#关于开发中版本更新遇到的问题" class="headerlink" title="关于开发中版本更新遇到的问题"></a>关于开发中版本更新遇到的问题</h1><h2 id="发布了一个-versionCode-错误的版本，怎么办"><a href="#发布了一个-versionCode-错误的版本，怎么办" class="headerlink" title="发布了一个 versionCode 错误的版本，怎么办"></a>发布了一个 versionCode 错误的版本，怎么办</h2><p>​    场景：1.0版本的 versionCode 是1；而1.1版本的 versionCode 被误写成了21；但在之后发布的1.2版本仍然使用的是3。</p>
<p>​    那么，带来的问题就是：1.1版本的用户无法升级到1.2版本，因为21&gt;3，在程序看来，1.1的版本反而比1.2的新；以此同时，1.2版本的用户还会收到提示更新到1.1，导致回滚到旧版本，这种体验是极差的。</p>
<p>​    所以，当我遇到这样的情况时，我是在新版本将 versionCode 直接跳到30，重新开始的。</p>
<h2 id="发出去的应用有-Bug-，怎么办"><a href="#发出去的应用有-Bug-，怎么办" class="headerlink" title="发出去的应用有 Bug ，怎么办"></a>发出去的应用有 Bug ，怎么办</h2><p>我的做法是分为两种情况：</p>
<ol>
<li>当 bug 无法再短时间内解决时，直接将之前的旧版本的 versionCode 改大点，提交新版本，供用户下载。</li>
<li>bug 可以短时间内解决时，赶紧修复 bug ，加 VersionCode，发布新版本</li>
</ol>
<blockquote>
<p><strong>作者简介</strong>：</p>
<p><strong>刘广明</strong>(<a href="http://weibo.com/u/1665380350" target="_blank" rel="external">@ cnLGMing</a>)，一步一步往上爬。</p>
<p><a href="http://www.liuguangmingcn.com/" target="_blank" rel="external">个人博客</a> 、<a href="https://github.com/ cnLGMing" target="_blank" rel="external">GitHub</a> 、<a href="https://www.zhihu.com/people/LGMing" target="_blank" rel="external">知乎</a></p>
<p><strong>文章若有不对之处，欢迎指正，谢谢~</strong></p>
<p><strong>版权声明：原创作品，转载时请务必注明原始出处。</strong></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[常用的正则表达式]]></title>
      <url>http://yoursite.com/2016/05/11/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>正则表达式可以迅速地用极简单的方式达到字符串的复杂控制。<strong>为了避免重复造轮子，此文将用于记录常用的正则表达式</strong>。<br><a id="more"></a></p>
<blockquote>
<p><u><strong>文中所列正则表达式，均有优化之处。若您有更优的，欢迎讨论。同时，也欢迎提供其他常用正则。谢谢~~~</strong></u></p>
</blockquote>
<ul>
<li><p>邮箱：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String regex = <span class="string">"\\w+@\\w+\\.[a-z]+(\\.[a-z]+)?"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>手机号码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String regex = <span class="string">"(\\+\\d+)?1(3[0-9]|4[57]|5[0-35-9]|8[0-9]|70)\\d&#123;8&#125;$"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>ip 地址：(粗略匹配，有待优化)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String regex = <span class="string">"[1-9](\\d&#123;1,2&#125;)?\\.(0|([1-9](\\d&#123;1,2&#125;)?))\\.)&#123;2&#125;(0|([1-9](\\d&#123;1,2&#125;)?))"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>身份证号码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String regex = <span class="string">"[1-9]\\d&#123;13,16&#125;[a-zA-Z0-9]&#123;1&#125;"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>固定电话号码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String regex = <span class="string">"(\\+\\d+)?(\\d&#123;3,4&#125;\\-?)?\\d&#123;7,8&#125;$"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>中国邮编</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String regex = <span class="string">"[1-9]\\d&#123;5&#125;"</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在 Java 中，使用正则进行匹配，有两种常用方法：</p>
<ul>
<li><p>第一种：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Pattern p = Pattern.compile(<span class="string">"正则表达式"</span>);</div><div class="line">Matcher m = p.matcher(<span class="string">"需要匹配的字符(串)"</span>);</div><div class="line"><span class="keyword">boolean</span> b = m.matches();</div><div class="line"></div><div class="line"><span class="comment">// 也可直接写成链式</span></div><div class="line"><span class="keyword">boolean</span> b = Pattern.compile(<span class="string">"正则表达式"</span>).matcher(<span class="string">"需要匹配的字符(串)"</span>).matches();</div></pre></td></tr></table></figure>
</li>
<li><p>第二种：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span> b = Pattern.matches(<span class="string">"正则表达式"</span>, <span class="string">"需要匹配的字符(串)"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p><strong>作者简介：</strong></p>
<p><strong>刘广明</strong>(<a href="http://weibo.com/u/1665380350" target="_blank" rel="external">@cnLGMing</a>)，一步一步往上爬。</p>
<p><a href="http://www.liuguangmingcn.com/" target="_blank" rel="external">个人博客</a> 、<a href="https://github.com/cnLGMing" target="_blank" rel="external">GitHub</a> 、<a href="https://www.zhihu.com/people/LGMing" target="_blank" rel="external">知乎</a></p>
<p><strong>文章若有不对之处，欢迎指正，谢谢~</strong></p>
<p><strong>版权声明：原创作品，转载时请务必注明原始出处。</strong></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面试_02]]></title>
      <url>http://yoursite.com/2016/02/26/%E9%9D%A2%E8%AF%95_02/</url>
      <content type="html"><![CDATA[<p>第二次面试Android开发工程师<br><a id="more"></a></p>
<ul>
<li>公司：深圳活动家网络科技有限公司</li>
<li>职位：Android 游戏开发工程师</li>
<li>时间：2016/02/26 14:30</li>
</ul>
<h1 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h1><ul>
<li>res目录下的raw文件夹中数据库如何操作？</li>
<li>SQLite文件如何与apk一起打包？</li>
<li>横竖屏切换的生命周期是？</li>
<li>hook技术的理解？</li>
<li>Sax解析的优点？</li>
<li>Intent可以传递哪些数据？</li>
</ul>
<h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><ul>
<li>如何统计APP被下载的次数？</li>
<li>注册/登录的具体流程是怎么样的？</li>
<li>如何知道用户是否是第一次发开APP？</li>
</ul>
<blockquote>
<p> <strong>作者简介</strong>：</p>
<p> <strong>刘广明</strong>(<a href="http://weibo.com/u/1665380350" target="_blank" rel="external">@cnLGMing</a>)，一步一步往上爬。</p>
<p> <a href="http://www.liuguangmingcn.com/" target="_blank" rel="external">个人博客</a> 、<a href="https://github.com/cnLGMing" target="_blank" rel="external">GitHub</a> 、<a href="https://www.zhihu.com/people/LGMing" target="_blank" rel="external">知乎</a></p>
<p> <strong>文章若有不对之处，欢迎指正，谢谢~</strong></p>
<p> <strong>版权声明：原创作品，转载时请务必注明原始出处。</strong></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面试_01]]></title>
      <url>http://yoursite.com/2016/02/24/%E9%9D%A2%E8%AF%95_01/</url>
      <content type="html"><![CDATA[<p>第一次正式面试Android开发工程师<br><a id="more"></a></p>
<ul>
<li>公司：深圳市速影科技有限公司</li>
<li>职位：Android TV应用开发工程师</li>
<li>时间：2016/02/24 10:00</li>
</ul>
<h1 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h1><ul>
<li>如何避免应用程序弹出ANR提示框？</li>
<li>如何限制APP安装后使用的次数？</li>
<li>多分辨率、国际化，如何实现？</li>
<li>数据缓存怎么实现？</li>
<li>JavaScript可以和Android通信吗？如何实现？</li>
<li>HTML可以和Android通信、交互吗？如何实现？</li>
<li>AIDL的用途是什么？</li>
<li>Application类的作用？</li>
<li>如何结束Activity？结束时调用的生命周期的方法是什么？</li>
</ul>
<h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><ul>
<li>adb、Linux的常用命令？</li>
<li>如何调试、有没有接触过无线调试？</li>
<li>图片如何缓存、key是什么？</li>
<li>如何开机自动启动app？</li>
<li>如何实现用户自定义控件？</li>
<li>线性布局中的权重是怎么回事？</li>
<li>Application类有没有使用过？你在哪些方面用过？</li>
<li>Service可以弹对话框吗？</li>
<li>两个APP如何通信？具体描述？</li>
<li>极光推送的原理？是服务器主动推送还是APP发送请求？</li>
<li>ShareSDK第三方登录及分享需要注意什么？</li>
<li>如何实现APP的版本更新？具体流程？版本号如何获取？在哪里配置版本号？</li>
<li>内容提供者的用途及使用方式？</li>
<li>你之前公司的服务器返回的数据格式是？json与xml有什么区别?有什么优势及劣势？</li>
</ul>
<blockquote>
<p><strong>作者简介</strong>：</p>
<p><strong>刘广明</strong>(<a href="http://weibo.com/u/1665380350" target="_blank" rel="external">@cnLGMing</a>)，一步一步往上爬。</p>
<p><a href="http://www.liuguangmingcn.com/" target="_blank" rel="external">个人博客</a> 、<a href="https://github.com/cnLGMing" target="_blank" rel="external">GitHub</a> 、<a href="https://www.zhihu.com/people/LGMing" target="_blank" rel="external">知乎</a></p>
<p><strong>文章若有不对之处，欢迎指正，谢谢~</strong></p>
<p><strong>版权声明：原创作品，转载时请务必注明原始出处。</strong></p>
</blockquote>
]]></content>
    </entry>
    
  
  
</search>
